Neo6502 cheat sheet - just the facts!
05-Sep-2025 PJF

=====>   ALWAYS include <neo6502.h>


1 - System - #include <neo/system.h>

a. uint8_t neo_api_error(void); // get system error code
b. long neo_system_timer(void); // get value of 100Hz system timer
c. uint8_t neo_system_key_status(char key); // get state of a keyboard key
d. void neo_system_credits(void); // print system contributor roster
e. void neo_system_serial_update(void); //update the serial command handler (?)
f. void neo_system_locale(const char *locale); //set locale code, e.g. "EN',"FR"
g. void neo_system_reset(void); // resets the system; will not return
h. void neo_system_debug_putc(char ch); // write a char to the debug port
i. void neo_system_version(neo_version_t *version); // return system version


2. Console - #include <neo/console.h>

a. char neo_console_read_char(void); // return q'ed key press, or 0 if no q
b. uint8_t neo_console_status(void); // return 0xFF is kbd q empty, 0 if ot
c. void neo_console_read_line_p(neo_pstring_t *line); // don't use.
d. void neo_console_read_line(char *buf); // read line(s) below cursor into buf
e. void neo_console_define_hotkey_p(uint8_t hotkey, const neo_pstring_t *str);
   // ^ don't use ^
f. void neo_console_define_hotkey(uint8_t hotkey, const char *str);
   // ^ define a hotkey which emits a C-style string when pressed ^
g. void neo_console_define_char(char ch, const uint8_t *bitmap);
   // ^ define font character ^
h. void neo_console_write_char(char ch); // write char to console
i. void neo_console_set_cursor_pos(uint8_t x, uint8_t y); // set cons cursor pos
j. void neo_console_list_hotkeys(void); // display current F-key defns
k. void neo_console_screen_size(uint8_t *width, uint8_t *height); // get cons sz
l. void neo_console_clear_screen(void); // clear the screen
m. void neo_console_cursor_pos(uint8_t *x, uint8_t *y); // get cons cursor pos
n. void neo_console_clear_region(uint8_t x1,uint8_t y1,uint8_t x2,uint8_t y2);
   // ^ clear all text within a range of console rows and cols ^
o. void neo_console_set_text_color(uint8_t fg, uint8_t bg); // set text colors
p. void neo_console_get_text_color(uint8_t *fg, uint8_t *bg); // get txt colors
q. void neo_console_set_cursor_visibility(uint8_t value); // set cursor vis



3 - File I/O - #include <neo/file.h>

a. void neo_file_list_directory(void); // list directory contents
b. void neo_file_load_p(const neo_pstring_t *filename, void *dest); // DON'T USE
c. void neo_file_load(const char *filename, void *dest); // load file to "dest"
d. void neo_file_store_p(const neo_pstring_t *filename, const void *src,
                         uint16_t len); // DON'T USE
e. void neo_file_store(const char *filename, const void *src, uint16_t len);
   // ^ store bytes in memory to file ^ 
f. void neo_file_open_p(uint8_t channel, const neo_pstring_t *filename,
                        uint8_t mode); // DON'T USE
g. void neo_file_open(uint8_t channel, const char *filename, uint8_t mode);
   // ^ open a file, attach to a channel
h. void neo_file_close(uint8_t channel); // close file attached to channel
i. void neo_file_seek(uint8_t channel, uint32_t pos); // seek
j. uint32_t neo_file_tell(uint8_t channel); // tell
k. uint16_t neo_file_read(uint8_t channel, void *dest, uint16_t len);
   // ^ read bytes from an open file into  memory
l. uint32_t neo_file_write(uint8_t channel, const void *src, uint16_t len);
   // ^ write bytes from memory to an open file
m. uint32_t neo_file_size(uint8_t channel); // get size of open file
n. void neo_file_set_size(uint8_t channel, uint32_t size); // set file size (?)
o. void neo_file_rename_p(const neo_pstring_t *from, const neo_pstring_t *to);
   // ^ DON'T USE ^
p. void neo_file_rename(const char *from, const char *to); / rename a file
q. void neo_file_delete_p(const neo_pstring_t *filename); // DON'T USE
r. void neo_file_delete(const char *filename); // delete named file
s. void neo_file_chdir_p(const neo_pstring_t *path); // DON'T USE
t. void neo_file_chdir(const char *path); // change directory
u. void neo_file_mkdir_p(const neo_pstring_t *path); // DON'T USE
v. void neo_file_mkdir(const char *path); // create new directory
w. void neo_file_stat_p(const neo_pstring_t *path, neo_file_stat_t *st);
   // ^ DON'T USE ^
x. void neo_file_stat(const char *path, neo_file_stat_t *st);
   // stat a file
y. void neo_file_opendir_p(const neo_pstring_t *path); // DON'T USE
z. void neo_file_opendir(const char *path); // open dir for enumeration
aa. void neo_file_readdir_p(neo_pstring_t *path, neo_file_stat_t *st);
    // ^ DON'T USE ^
ab. void neo_file_readdir(char *path, neo_file_stat_t *st);
    // read next element from directory, return name and stat
ac. void neo_file_closedir(void); // close directory
ad. void neo_file_copy_p(const neo_pstring_t *from, const neo_pstring_t *to);
    // ^ DON'T USE ^
ae. void neo_file_copy(const char *from, const char *to);
    // copy file using source and destination names
af. void neo_file_set_attr_p(const neo_pstring_t *path, uint8_t attr);
    // ^ DON'T USE ^
ag. void neo_file_set_attr(const char *path, uint8_t attr);
    // set attributes of named file
ah. bool neo_file_eof(uint8_t channel); // check if file position is EOF
ai. void neo_file_get_cwd(char *buffer, uint8_t length); // get cwd name
aj. void neo_file_list_filtered_p(const neo_pstring_t *filter);
    // ^ DON'T USE ^
ak. void neo_file_list_filtered(const char *filter);
    // print filtered list of files in current directory


4 - Mathematics - #include "math.h"
    (incomplete support, and must include local source)

a. uint32 neo_math_random_integer(uint32 max); // get random number in [0,max-1]


5 - Graphics - #include <neo/graphics.h>

a. void neo_graphics_set_defaults(uint8_t color_mask, uint8_t color_xor,
                                  uint8_t fill, uint8_t extent, uint8_t flip);
   // ^ reset graphics system with desired properties ^
b. void neo_graphics_draw_line(uint16_t x1,uint16_t y1,uint16_tx2,uint16_t y2);
   // ^ draw a line ^
c. void neo_graphics_draw_rectangle(uint16_t x1, uint16_t y1,
                                    uint16_t x2, uint16_t y2);
   // ^ draw a rectangle ^
d. void neo_graphics_draw_ellipse(uint16_t x1, uint16_t y1,
                                  uint16_t x2, uint16_t y2);
   // ^ draw an ellipse ^
e. void neo_graphics_draw_pixel(uint16_t x, uint16_t y); // draw a pixel
f. void neo_graphics_draw_text_p(uint16_t x, uint16_t y,
                                 const neo_pstring_t *text);
   // ^ DO NOT USE ^
g. void neo_graphics_draw_text(uint16_t x, uint16_t y, const char *text);
   // ^ draw a string ^
h. void neo_graphics_draw_image(uint16_t x, uint16_t y, uint8_t id);
   // ^ draw the image with the specified ID with topleft corner at (x,y)
i. void neo_graphics_draw_tilemap(uint16_t x1, uint16_t y1,
                                  uint16_t x2, uint16_t y2);
   // ^ draw the current tilemap with corners at (x1,y1) and (x2,y2)
j. void neo_graphics_set_palette(uint8_t idx, uint8_t r, uint8_t g, uint8_t b);
   // ^ set a palette color ^
k. uint8_t neo_graphics_read_pixel(uint16_t x, uint16_t y);
   // ^ get color at a specified pixel ^
l. void neo_graphics_write_pixel(uint16_t x, uint16_t y, uint8_t idx);
   // ^ set color at a specified pixel ^
m. void neo_graphics_reset_palette(void); // reset color palette
n. void neo_graphics_set_tilemap(const void *src, uint16_t x, uint16_t y);
   // ^ set current tilemap ^
o. long neo_graphics_frame_count(void); // get global count of frames drawn
p. void neo_graphics_set_color(uint8_t idx); // set drawing color
q. void neo_graphics_set_solid_flag(uint8_t value); // set solid drawing flag
r. void neo_graphics_set_draw_size(uint8_t value); // set drawing size
s. void neo_graphics_set_flip_bits(uint8_t value);
   // ^ set flip bits for drawing images ^


6 - Sprites - #include <neo/sprites.h>

a. void neo_sprite_reset(void);   // reset the sprite system
b. void neo_sprite_set(uint8_t id, uint16_t x, uint16_t y, uint8_t img,
                       uint8_t flip, uint8_t anchor);
   // ^ set the sprite: Id, pos, img params, flip, anchor ^
c. void neo_sprite_hide(uint8_t id); // hide a sprite
d. bool neo_sprite_collision(uint8_t first, uint8_t second, uint8_t distance);
   // ^ check for a collision between two sprites ^
e. void neo_sprite_position(uint8_t id, uint16_t *x, uint16_t *y);
   // ^ get sprite position ^


7 - Controller - #include "controller.h"
    (incomplete support, and must include local source)

a. uint8_t neo_controller_read_default(void); // read default controller state
b. uint8_t neo_controller_count(void); // get number of  attached controllers
c. uint32_t neo_controller_read(uint8_t index); // get state of indexed contr


8 - Sound - #include <neo/sound.h>

a. void neo_sound_reset(void); // reset sound system
b. void neo_sound_reset_channel(uint8_t channel); // reset a channel
c. void neo_sound_beep(void); // beep
d. void neo_sound_queue(uint8_t channel, uint16_t frequency, uint16_t duration,
                        uint16_t slide, uint8_t target);
   // ^ enqueue a sound ^
e. void neo_sound_play_effect(uint8_t channel, uint8_t id);
   // ^ play a sound effect ^
f. uint8_t neo_sound_status(uint8_t channel); // query status of channel
g. uint8_t neo_sound_channel_count(void); // get number of channels


9 - Turtle Graphics - #include <neo/turtle.h>

a. void neo_turtle_init(uint8_t idx);
   // ^ initialise turle system, use idx'th sprite as the turtle ^
b. void neo_turtle_turn(int16_t deg);
   // ^ turn turtle right by deg degrees; make turtle visible if hidden ^
c. void neo_turtle_move(int16_t len, uint8_t color, uint8_t pen);
   // ^ Move turtle forward specified distance, draw line of given color if
   //   pen is true; show turtle if hidden ^
d. void neo_turtle_hide(void); // hide the turtle
e. void neo_turtle_home(void); // move turtle to center, facing up
f. void neo_turtle_show(void); // show the turtle


10 - UExt I/O - #include <neo/uext.h>
(the UExt port is the small shrouded header on the Neo - it's a GPIO thing)

a. void neo_uext_init(void); // iniialise the UExt I/O system
b. void neo_uext_gpio_write(uint8_t pin, uint8_t value);
   // ^ Write the specified value to the output latch for the specified UExt
   //   pin. This will only be output if the pin is enabled and its direction
   //   set to output. ^
c. uint8_t neo_uext_gpio_read(uint8_t pin);
   // ^ Reads the value on the specified UEXT pin.
   //   If the pin is set to input, this will read the level on the pin.
   //   If the pin is set to output, this will read the value set on the
   //   pin's output latch. ^
d. void neo_uext_gpio_set_direction(uint8_t pin, uint8_t direction);
   // ^ Set the direction of the specified UEXT pin. ^
e. void neo_uext_i2c_write(uint8_t device, uint8_t reg, uint8_t value);
   // ^ Write to an I2C device. ^
f. uint8_t neo_uext_i2c_read(uint8_t device, uint8_t reg);
   // ^ Read from an I2C device. ^
g. uint16_t neo_uext_analogue_read(uint8_t pin); // Read from analog input pin
h. uint8_t neo_uext_i2c_status(uint8_t device); // Query status of I2C device
i. void neo_uext_i2c_block_read(uint8_t device, void *dest, uint16_t len);
   // ^ read a block of bytes form an I2C device. ^
j. void neo_uext_i2c_block_write(uint8_t device,const void *src,uint16_t len);
   // ^ Write a block of bytes to an I2C device. ^
k. void neo_uext_spi_block_read(uint8_t device, void *dest, uint16_t len);
   // ^ read a block from an SPI device ^
l. void neo_uext_spi_block_write(uint8_t device, const void *src, uint16_t len);
   // ^ Write a block of byytes to an SPI device ^
m. void neo_uext_uart_block_read(uint8_t device, void *dest, uint16_t len);
   // ^ Read a block of bytes from the UExt UART ^
n. void neo_uext_uart_block_write(uint8_t device,const void *src, uint16_t len);
   // ^ Write a block of bytes to the UExt UART ^
o. void neo_uext_uart_configure(uint32_t baudrate, uint8_t protocol);
   // Configure UExt UART speed and protocol
p. void neo_uext_uart_write(uint8_t value); // Write a byte to the UExt UART
q. uint8_t neo_uext_uart_read(void); // read a byte from the UExt UART
r. bool neo_uext_uart_available(void);
   // ^ Check if a byte can be read from UExt UART. ^


11 - Mouse - #include "mouse.h"
     (incomplete support, and must include local source)

a. void neo_mouse_move_display_cursor(uint16_t x, uint16_t y);
   // ^ set mouse cursor position ^
b. void neo_mouse_set_mouse_display_cursor(uint8_t onOff);
   // ^ set display mouse cursor ^
c. void neo_mouse_get_mouse_state(uint16_t *xPos, uint16_t *yPos,
                                  uint8_t *buttonState,
                                  uint8_t *scrollWheelState);
   // ^ get current position and state of mouse ^
d. uint8_t neo_mouse_test_mouse_present(void); // test if mouse is present
e. void neo_mouse_select_mouse_cursor(uint8_t index); // select mouse cursor
